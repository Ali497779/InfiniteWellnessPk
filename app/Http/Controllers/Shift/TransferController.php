<?php

namespace App\Http\Controllers\Shift;

use Illuminate\View\View;
use Illuminate\Http\Request;
use App\Models\Shift\Transfer;
use App\Exports\StockOutExport;
use App\Models\Inventory\Product;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Http\JsonResponse;
use App\Http\Controllers\Controller;
use App\Models\Shift\TransferProduct;
use Illuminate\Http\RedirectResponse;
use App\Imports\Inventory\ProductImport;
use App\Http\Requests\Shift\TransferRequest;

class TransferController extends Controller
{
    public function index(): View
    {
        return view('shift.transfer.index', [
            'transfers' => Transfer::latest()->paginate(10)->onEachSide(1),
        ]);
    }

    public function importExcel(Request $request)
    {
        return "testing";
        Excel::import(new TransferProductImport, storage_path('app/public/'.request()->file('transfer-products_csv')->store('transfer-products-excel-files', 'public')));

        return back()->with('success', 'Imported successfully!');
    }

    public function printReport()
    {
        return (new StockOutExport)->download('stock-out-report.xlsx');
    }

    public function create(): View
    {
        return view('shift.transfer.create', [
            'products' => Product::orderBy('product_name')->get(),
            'transfer_id' => Transfer::latest()->pluck('id')->first(),
            'transfers' => Transfer::with('transferProducts.product')->get(),
        ]);
    }

    public function validateTransfer(Request $request){
        
        $customMessages = [
            'products.required' => 'At least one product is required',
            'products.*.total_piece' => 'At least one product quantity is required',
        ];
        
        $validatedData = $request->validate([
            'supply_date' => ['required', 'date'],
            'products' => ['required'],
            'products.*.id' => ['required', 'exists:products,id'],
            'products.*.unit_of_measurement' => ['required', 'integer', 'in:0,1'],
            'products.*.price_per_unit' => ['required', 'numeric'],
            'products.*.total_piece' => ['required', 'integer','min:1'],
            'products.*.total_pack' => ['required', 'integer'],
            'products.*.amount' => ['required', 'numeric'],
        ], $customMessages);
        
            // Validation succeeded
            return response()->json(['valid' => true, 'message' => 'Validation succeeded.']);
        

    }

    public function fileData(){
        $productIDs = [
1088,
1091,
1092,
1096,
1100,
1114,
1115,
1116,
1117,
1118,
1119,
1120,
1122,
1132,
1133,
1136,
1137,
1138,
1139,
1140,
1150,
1151,
1152,
1158,
1179,
1180,
1181,
1182,
1218,
1220,
1235,
1236,
1274,
1275,
1276,
1289,
1290,
1291,
1293,
1294,
1295,
1296,
1297,
1298,
1299,
1305,
1309,
1313,
1314,
1317,
1320,
1321,
1322,
1323,
1327,
1329,
1330,
1331,
1335,
1337,
1338,
1339,
1346,
1347,
1348,
1349,
1350,
1351,
1352,
1353,
1354,
1360,
1361,
1362,
1363,
1367,
1368,
1383,
1384,
1385,
1388,
1392,
1393,
1394,
1395,
1396,
1397,
1405,
1406,
1407,
1408,
1409,
1410,
1411,
1412,
1413,
1416,
1420,
1421,
1422,
1423,
1424,
1425,
1426,
1427,
1428,
1429,
1430,
1435,
1436,
1437,
1438,
1439,
1440,
1447,
1448,
1449,
1450,
1451,
1452,
1457,
1458,
1459,
1460,
1461,
1462,
1463,
1466,
1467,
1470,
1473,
1474,
1476,
1477,
1478,
1485,
1486,
1487,
1488,
1492,
1493,
1495,
1496,
1497,
1498,
1499,
1500,
1501,
1502,
1503,
1505,
1507,
1509,
1513,
1514,
1515,
1516,
1517,
1519,
1520,
1521,
1522,
1523,
1528,
1529,
1530,
1531,
1532,
1533,
1534,
1535,
1538,
1541,
1542,
1545,
1546,
1547,
1548,
1549,
1550,
1553,
1554,
1555,
1566,
1567,
1568,
1569,
1570,
1571,
1572,
1575,
1576,
1577,
1578,
1579,
1580,
1587,
1590,
1591,
1596,
1599,
1605,
1606,
1608,
1609,
1614,
1616,
1617,
1618,
1620,
1621,
1622,
1623,
1624,
1625,
1627,
1628,
1629,
1630,
1631,
1632,
1633,
1634,
1635,
1636,
1637,
1638,
1639,
1641,
1642,
1643,
1653,
1660,
1661,
1666,
1670,
1671,
1672,
1673,
1674,
1675,
1677,
1678,
1681,
1682,
1683,
1684,
1685,
1686,
1687,
1688,
1698,
1699,
1704,
1705,
1708,
1721,
1731,
1732,
1733,
1734,
1735,
1736,
1737,
1738,
1739,
1740,
1741,
1742,
1743,
1744,
1745,
1746,
1747,
1748,
1752,
1753,
1754,
1755,
1756,
1765,
1766,
1772,
1773,
1774,
1775,
1776,
1777,
1778,
1779,
1780,
1781,
1782,
1783,
1784,
1785,
1786,
1787,
1788,
1792,
1793,
1794,
1795,
1796,
1797,
1798,
1799,
1800,
1801,
1802,
1803,
1804,
1805,
1806,
1807,
1808,
1809,
1810,
1811,
1812,
1813,
1814,
1815,
1816,
1817,
1818,
1819,
1820,
1821,
1822,
1823,
1824,
1825,
1826,
1827,
1828,
1829,
1830,
1831,
1832,
1833,
1834,
1835,
1836,
1837,
1838,
1839,
1840,
1841,
1842,
1843,
1844,
1845,
1846,
1847,
1848,
1849,
1850,
1851,
1852,
1853,
1854,
1855,
1856,
1857,
1858,
1859,
1860,
1861,
1862,
1863,
1864,
1865,
1866,
1867,
1868,
1869,
1870,
1871,
1872,
1873,
1874,
1875,
1876,
1877,
1878,
1879,
1880,
1881,
1882,
1883,
1884,
1885,
1886,
1887,
1888,
1889,
1890,
1891,
1892,
1893,
1894,
1895,
1896,
1897,
1898,
1899,
1900,
1901,
1902,
1903,
1904,
1905,
1906,
1907,
1908,
1909,
1910,
1911,
1912,
1913,
1914,
1915,
1916,
1917,
1918,
1919,
1920,
1921,
1922,
1923,
1924,
1925,
1926,
1927,
1928,
1929,
1930,
1931,
1932,
1933,
1934,
1935,
1936,
1937,
1938,
1939,
1940,
1941,
1942,
1943,
1944,
1945,
1946,
1947,
1948,
1949,
1950,
1951,
1952,
1953,
1954,
1955,
1956,
1957,
1980,
1981,
1982,
1983,
1986,
1987,
1990,
1991,
1992,
1993,
1994,
1995,
1996,
1997,
1998,
1999,
2000,
2001,
2002,
2003,
2004,
2005,
2006,
2007,
2008,
2009,
2010,
2011,
2012,
2013,
2014,
2015,
2021,
2022,
2023,
2024,
2025,
2026,
2027,
2028,
2029,
2030,
2031,
2032,
2033,
2034,
2035,
2036,
2037,
2038,
2039,
2040,
2041,
2042,
2043,
2044,
2045,
2046,
2047,
2048,
2049,
2050,
2051,
2052,
2053,
2054,
2055,
2056,
2057,
2058,
2059,
2060,
2061,
2062,
2063,
2064,
2065,
2066,
2067,
2068,
2069,
2070,
2071,
2072,
2073,
2074,
2075,
2076,
2077,
2078,
2079,
2080,
2081,
2082,
2083,
2084,
2085,
2086,
2087,
2088,
2089,
2090,
2091,
2092,
2093,
2094,
2095,
2096,
2097,
2098,
2099,
2100,
2101,
2102,
2103,
2104,
2105,
2106,
2107,
2108,
2109,
2110,
2111,
2112,
2113,
2114,
2115,
2116,
2117,
2118,
2119,
2120,
2121,
2122,
2129,
2130,
2138,
2139,
2140,
2141,
2142,
2143,
2144,
2145,
2146,
2147,
2148,
2149,
2150,
2151,
2152,
2153,
2154,
2155,
2156,
2157,
2158,
2159,
2160,
2161,
2162,
2163,
2164,
2166,
2167,
2168,
2170,
2171,
2178,
2179,
2180,
2182,
2183,
2187,
2188,
2190,
2192,
2196,
2197,
2198,
2200,
2203,
2208,
2213,
2214,
2215,
2216,
2217,
2219,
2223,
2233,
2234,
2235,
2236,
2237,
2242,
2244,
2246,
2256,
2257,
2259,
2268,
2269,
2270,
2271,
2272,
2273,
2274,
2275,
2276,
2277,
2278,
2279,
2280,
2281,
2282,
2283,
2284,
2288,
2290,
2291,
2292,
2293 ];

$products = Product::whereIn('id',$productIDs)->get();
return view('shift.table_data',[
    'products' => $products
]);
    }

    public function products(Product $product): JsonResponse
    {
        return response()->json([
            'product' => $product,
        ]);
    }

    public function store(TransferRequest $request): RedirectResponse
    {
        $transfer = Transfer::create([
            'supply_date' => $request->supply_date
        ]);

        foreach ($request->products as $product) {
            $transferProduct = TransferProduct::create([
                'transfer_id' => $transfer->id,
                'product_id' => $product['id'],
                'unit_of_measurement' => $product['unit_of_measurement'],
                'price_per_unit' => $product['price_per_unit'],
                'total_piece' => $product['total_piece'],
                'total_pack' => $product['total_pack'],
                'amount' => $product['amount']
            ]);

        }

        return to_route('shift.transfers.index')->with('success', 'Transfer created!');
    }

    public function show(Transfer $transfer): View
    {
        return view('shift.transfer.show', [
            'transfer' => $transfer->load('transferProducts.product'),
        ]);
    }

    public function retransfer($transferId)
    {
        
         $transferProduct = TransferProduct::where('transfer_id',$transferId)->with('product')->get();

         if (!$transferProduct) {
             return response()->json(['message' => 'Transfer not found'], 404);
         }
        //  dd($transferProduct);
 
         return response()->json($transferProduct);
    }

}
